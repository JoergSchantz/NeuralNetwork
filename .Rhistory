# a one neuron perceptron for logistic regression
# import libs
import numpy as np
# define perceptron class
class perceptron:
def __init__(self):
pass
# estimate weights via OLS
def fit(self, features, target):
r, c = features.shape
# features' first row is the bias
self.inputs = np.vstack(np.zeros([r,1]), features)
# perform OLS
T = np.transpose(self.inputs)
A = T @ self.inputs
self.weights = (np.linalg.inv(A) @ T) @ target
def forward(self):
self.scores =  np.dot(self.inputs, self.weights)
# response/ activation function is logit function
def response(self):
z = np.exp(self.scores)
self.responses = z / (1 + z)
# TEST RUN
from sklearn import datasets
import pandas as pd
# prepare data for binomial regression
iris = datasets.load_iris()
iris = pd.DataFrame(
data = np.c_[iris['data'], iris['target']],
columns = iris['feature_names'] + ['target']
)
setosa = []
for i in range(len(iris['target'])):
if iris['target'][i] == 0:
setosa.append(1)
else:
setosa.append(0)
iris['setosa'] = setosa
# init preceptron
logit = perceptron()
View(logit)
logit.fit(iris['data'], iris['setosa'])
iris = datasets.load_iris()
setosa = []
for i in range(len(iris['target'])):
if iris['target'][i] == 0:
setosa.append(1)
else:
setosa.append(0)
iris['setosa'] = setosa
logit.fit(iris['data'], iris['setosa'])
# a one neuron perceptron for logistic regression
# import libs
import numpy as np
# define perceptron class
class perceptron:
def __init__(self):
pass
# estimate weights via OLS
def fit(self, features, target):
r, c = features.shape
# features' first row is the bias
self.inputs = np.hstack(np.zeros([r,1]), features)
# perform OLS
T = np.transpose(self.inputs)
A = T @ self.inputs
self.weights = (np.linalg.inv(A) @ T) @ target
def forward(self):
self.scores =  np.dot(self.inputs, self.weights)
# response/ activation function is logit function
def response(self):
z = np.exp(self.scores)
self.responses = z / (1 + z)
iris = datasets.load_iris()
logit = perceptron()
for i in range(len(iris['target'])):
if iris['target'][i] == 0:
setosa.append(1)
else:
setosa.append(0)
iris['setosa'] = setosa
logit.fit(iris['data'], iris['setosa'])
# a one neuron perceptron for logistic regression
# import libs
import numpy as np
# define perceptron class
class perceptron:
def __init__(self):
pass
# estimate weights via OLS
def fit(self, features, target):
r, c = features.shape
# features' first row is the bias
self.inputs = np.hstack((np.zeros([r,1]), features))
# perform OLS
T = np.transpose(self.inputs)
A = T @ self.inputs
self.weights = (np.linalg.inv(A) @ T) @ target
def forward(self):
self.scores =  np.dot(self.inputs, self.weights)
# response/ activation function is logit function
def response(self):
z = np.exp(self.scores)
self.responses = z / (1 + z)
logit = perceptron()
logit.fit(iris['data'], iris['setosa'])
# a one neuron perceptron for logistic regression
# import libs
import numpy as np
# define perceptron class
class perceptron:
def __init__(self):
pass
# estimate weights via OLS
def fit(self, features, target):
r, c = features.shape
# features' first row is the bias
self.inputs = np.hstack((np.zeros([r,1]), features))
# perform OLS
T = np.transpose(self.inputs)
A = np.dot(T, self.inputs)
self.weights = np.dot(np.dot(np.linalg.inv(A), T), target)
def forward(self):
self.scores =  np.dot(self.inputs, self.weights)
# response/ activation function is logit function
def response(self):
z = np.exp(self.scores)
self.responses = z / (1 + z)
class perceptron:
def __init__(self):
pass
# estimate weights via OLS
def fit(self, features, target):
r, c = features.shape
# features' first row is the bias
self.inputs = np.hstack((np.zeros([r,1]), features))
# perform OLS
T = np.transpose(self.inputs)
A = np.dot(T, self.inputs)
self.weights = np.dot(np.dot(np.linalg.inv(A), T), target)
def forward(self):
self.scores =  np.dot(self.inputs, self.weights)
# response/ activation function is logit function
def response(self):
z = np.exp(self.scores)
self.responses = z / (1 + z)
logit = perceptron()
logit.fit(iris['data'], iris['setosa'])
View(iris)
View(iris['data'])
View(iris['data']['T'])
logit.fit(iris['data'], iris['setosa'])
# import libs
import numpy as np
# define perceptron class
class perceptron:
def __init__(self):
pass
# estimate weights via OLS
def fit(self, features, target):
r, c = features.shape
# features' first row is the bias
self.inputs = np.hstack((np.ones([r,1]), features))
# perform OLS
T = np.transpose(self.inputs)
A = np.dot(T, self.inputs)
self.weights = np.dot(np.dot(np.linalg.inv(A), T), target)
def forward(self):
self.scores =  np.dot(self.inputs, self.weights)
# response/ activation function is logit function
def response(self):
z = np.exp(self.scores)
self.responses = z / (1 + z)
self.responses = z / (1 + z)
logit = perceptron()
View(logit)
logit.fit(iris['data'], iris['setosa'])
class perceptron:
def __init__(self):
pass
# estimate weights via OLS
def fit(self, features, target):
r, c = features.shape
# features' first row is the bias
self.inputs = np.hstack((np.ones([r,1]), features))
# perform OLS
T = np.transpose(self.inputs)
A = T @ self.inputs
self.weights = (np.linalg.inv(A) @ T) @ target
def forward(self):
self.scores =  np.dot(self.inputs, self.weights)
# response/ activation function is logit function
def response(self):
z = np.exp(self.scores)
self.responses = z / (1 + z)
logit = perceptron()
logit.fit(iris['data'], iris['setosa'])
iris['setosa'].shape
len(iris['setosa'])
len(iris['target'])
setosa = []
for i in range(len(iris['target'])):
if iris['target'][i] == 0:
setosa.append(1)
else:
setosa.append(0)
iris['setosa'] = setosa
len(iris['setosa'])
logit.fit(iris['data'], iris['setosa'])
logit.forward()
logit.response()
print(logit.responses)
[np.exp(i) for i in [1,2,3]]
range(4)
len(range(4))
sum([[1,2,3],[4,5,6],[7,8,9]])
sum([[1,2,3],[4,5,6],[7,8,9]][0])
sum([[1,2,3],[4,5,6],[7,8,9]][2])
sum([[1,2,3],[4,5,6],[7,8,9]][3])
sum([[1,2,3],[4,5,6],[7,8,9]][1])
np.exp([[1,2,3],[4,5,6],[7,8,9]])
np.sum([[1,2,3],[4,5,6],[7,8,9]])
np.dot([[1,2,3],[4,5,6],[7,8,9]])
np.dot([[1,2,3],[4,5,6],[7,8,9]],[[1,2,3],[4,5,6],[7,8,9]] )
np.dot([1,2,3],[1,2,3] )
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
setwd("E:/Projects/NeuralNetwork")
reticulate::repl_python()
